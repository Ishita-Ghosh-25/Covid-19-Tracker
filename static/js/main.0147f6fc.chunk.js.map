{"version":3,"sources":["InfoBox.js","Util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","active","cases","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","mapCountries","setMapCountries","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0147f6fc.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({title,active, cases, total, ...props}) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && 'infoBox--selected'}`}>\r\n            <CardContent>\r\n                <Typography className = \"infoBox_title\"color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className=\"infoBox_cases\">{cases}</h2>\r\n                \r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import { ExpansionPanelDetails } from \"@material-ui/core\";\r\nimport numeral from \"numeral\";\r\nimport {Circle, Popup} from \"react-leaflet\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      rgb: \"rgb(204, 16, 52)\",\r\n    //   half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n    //   rgb: \"rgb(125, 215, 29)\",\r\n    //   half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n    //   rgb: \"rgb(251, 68, 67)\",\r\n    //   half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\n\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a,b) => {\r\n        if(a.cases > b.cases){\r\n            return -1;\r\n        }else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData;\r\n};\r\n\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n\r\nexport const showDataOnMap= (data, casesType='cases') =>(\r\n    data.map(country => (\r\n            <Circle\r\n                \r\n                center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                fillOpacity={0.4}\r\n                color={casesTypeColors[casesType].hex}\r\n                fillColor= {casesTypeColors[casesType].hex}\r\n                radius={\r\n               Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n               }\r\n\r\n            >\r\n                <Popup>\r\n                <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n                </Popup>\r\n            </Circle>\r\n            \r\n        )) \r\n);","\r\nimport React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./Util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react'\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}) {\r\n    return <div className=\"table\">\r\n        {countries.map(({country,cases})=>(\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td>\r\n                <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                </td>\r\n            </tr>\r\n        ))}\r\n        </div>;\r\n    \r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './InfoBox';\nimport Map from './Map';\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport {sortData, prettyPrintStat} from \"./Util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [mapCountries, setMapCountries] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] =useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 3.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const[casesType, setCasesType] =useState(\"cases\");\n  useEffect(() =>{\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n  }, [])\n  \n  \n  \n  \n  \n  useEffect(() => {\n     const getCountriesData = async () => {\n       await fetch(\"https://disease.sh/v3/covid-19/countries\")\n       .then((response) => response.json())\n       .then((data)=>{\n         const countries = data.map((country)=>(\n           {\n             name: country.country,\n             value: country.countryInfo.iso2\n           }));\n\n           const sortedData = sortData(data);\n           setTableData(sortedData);\n           setMapCountries(data);\n           setCountries(countries);\n       });\n     };\n     getCountriesData();\n  },[]);\n  \n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n    .then(response => response.json())\n    .then(data =>{\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    }) ;\n  \n  }\n  \n\n\n\n  return (\n    <div className='app'>\n    <div className=\"app_left\">\n    <div className='app_header'>\n    <h1>COVID 19 TRACKER</h1>\n    <FormControl className=\"app_dropdown\">\n        <Select variant=\"outlined\" \n        onChange={onCountryChange}\n        value={country}>\n        <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n        {countries.map(country => (\n            <MenuItem value={country.value}>{country.name}</MenuItem>\n        \n          ))}\n        \n        </Select>\n      </FormControl>\n    </div>\n    <div className=\"app_stats\">\n          <InfoBox \n          active={casesType === \"cases\" }\n          onClick={(e) => setCasesType('cases')}\n          title =\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox\n          active={casesType === \"recovered\" }\n           onClick = {(e) => setCasesType(\"recovered\")}\n           title =\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox\n          active={casesType === \"deaths\" }\n          onClick = {(e) => setCasesType(\"deaths\")}\n           title =\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n    </div> \n   <Map\n   casesType={casesType}\n   countries={mapCountries} \n     center = {mapCenter}\n     zoom = {mapZoom}\n   />\n    </div>\n    <Card className= \"app_right\">\n      <CardContent>\n        <h3>Live Cases By Country</h3>\n        <Table countries={tableData}/>\n        <h3>Worldwide New {casesType}</h3> \n        <LineGraph casesType={casesType}/>\n      </CardContent>\n    </Card>\n</div>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}